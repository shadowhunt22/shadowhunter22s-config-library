plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id "com.modrinth.minotaur" version "2.+"

	id 'maven-publish'
	id 'checkstyle'
}

version = project.mod_version
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/shadowhunter22s-config-library.accesswidener")

	splitEnvironmentSourceSets()

	mods {
		"shadowhunter22s-config-library" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

sourceSets {
	testmodClient {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

base {
	archivesName = project.archives_base_name
}

repositories {
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// checkstyle

checkstyle {
	configFile = rootProject.file("checkstyle.xml")
	toolVersion = "10.12.1"
}

tasks.register('checkstyleAll', Checkstyle) {
	configFile = rootProject.file("checkstyle.xml")

	// fail early
	ignoreFailures false
	showViolations true

	source 'src'

	classpath = files()
}

// Modrinth publishing

def minecraft_versions = [
		"1.20",
		"1.20.1"
]

static def forVersion(String first, String last) {
	if (first == last) {
		return first
	} else {
		return "${first}-${last}"
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "vDRbR4L9"

	versionNumber = "${project.mod_version}"
	versionName = "${project.mod_version} for ${forVersion(minecraft_versions.first(), minecraft_versions.last())}"
	versionType = "beta"

	uploadFile = remapJar
	additionalFiles = [remapSourcesJar]

	dependencies {
		required.project "fabric-api"
	}

	syncBodyFrom = rootProject.file("README.md").text
	changelog = rootProject.file("CHANGELOG.md").text

	gameVersions = minecraft_versions

	// debugMode = true
}